name: Deploy Credit Risk Analysis to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: azure-deployment-${{ github.ref }}
  cancel-in-progress: false

env:
  AZURE_RESOURCE_GROUP: rg-credit-risk-analysis-prod-ukwest
  AZURE_LOCATION: ukwest
  PYTHON_VERSION: '3.11'
  APP_SERVICE_NAME: credit-risk-analysis-prod-app-25h2ya

jobs:
  # Application Testing
  test-application:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        # Run configuration tests
        python -c "
        import sys
        sys.path.insert(0, '.')
        from app.utils.config_manager import ConfigManager
        config = ConfigManager()
        print('‚úÖ Configuration manager works')
        "
        
        # Test import structure
        python -c "
        import sys
        sys.path.insert(0, '.')
        from app.agents.sector_classification_agent import SectorClassificationAgent
        from app.apis.unified_api_service import get_unified_api_service
        print('‚úÖ All imports successful')
        "

  # Application Deployment
  deploy-application:
    needs: [test-application]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Configure Azure App Service for Python
      run: |
        echo "üîß Configuring Azure App Service for Python deployment..."
        echo "‚úÖ Python version: ${{ env.PYTHON_VERSION }}"
        echo "‚úÖ Entry point: main.py"
        echo "‚úÖ Dependencies: requirements.txt"
        
        # Create application settings for Azure
        echo "Creating Azure-specific configuration..."
        
        # Verify requirements.txt exists and has flask-cors
        if grep -q "flask-cors" requirements.txt; then
          echo "‚úÖ flask-cors found in requirements.txt"
        else
          echo "‚ùå flask-cors missing from requirements.txt"
        fi

    - name: Pre-deployment checks
      run: |
        echo "üîç Checking deployment readiness..."
        echo "App Service: ${{ env.APP_SERVICE_NAME }}"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "‚è≥ Waiting to avoid deployment conflicts..."
        sleep 10

    - name: Deploy to Azure App Service (with retry)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_SERVICE_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: '.'
      timeout-minutes: 20
      continue-on-error: true
      id: first_deploy
      env:
        SCM_DO_BUILD_DURING_DEPLOYMENT: true
        ENABLE_ORYX_BUILD: true
        PYTHON_ENABLE_GUNICORN_MULTIWORKERS: true
      
    - name: Retry deployment if failed
      if: steps.first_deploy.outcome == 'failure'
      run: |
        echo "‚ö†Ô∏è First deployment attempt failed, retrying in 60 seconds..."
        sleep 60
        
    - name: Second deployment attempt
      if: steps.first_deploy.outcome == 'failure'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_SERVICE_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: '.'
      timeout-minutes: 20
      env:
        SCM_DO_BUILD_DURING_DEPLOYMENT: true
        ENABLE_ORYX_BUILD: true
        PYTHON_ENABLE_GUNICORN_MULTIWORKERS: true
      
    - name: Wait for deployment completion
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30

    - name: Verify Deployment
      run: |
        APP_URL="https://${{ env.APP_SERVICE_NAME }}.azurewebsites.net"
        echo "üéØ Deployment Complete!"
        echo "üåê Application URL: $APP_URL"
        echo "‚è≥ Waiting for application to start..."
        sleep 60
        
        # Basic health check
        if curl -f --connect-timeout 30 --max-time 60 $APP_URL; then
          echo "‚úÖ Application is responding"
        else
          echo "‚ö†Ô∏è Application might still be starting up"
        fi
            WEBSITES_PORT=8000 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true \

        
        echo "üöÄ Deployment completed!"
        echo "üåê Application URL: $APP_URL"
        echo "üìä Databricks: https://dbc-beccfe71-12b6.cloud.databricks.com"
        echo "üîê Key Vault: craprodkv25h2ya"

